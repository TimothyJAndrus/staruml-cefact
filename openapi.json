{
     "openapi": "3.0.0",
     "info": {
       "title": "IdentityAPI API",
       "description": "IdentityAPI API - 1.0.0",
       "version": "1.0.0"
     },
     "servers": [
       {
         "url": "https://virtserver.swaggerhub.com/faizanvahevaria/identity/1.0.0",
         "description": "SwaggerHub API Auto Mocking"
       }
     ],
     "paths": {
       "/PersonRegistrations": {
         "get": {
           "tags": [
             "PersonRegistrations"
           ],
           "description": "Get a list of Encounter",
           "parameters": [
             {
               "name": "Encounter",
               "in": "query",
               "description": "missing description",
               "required": false,
               "style": "form",
               "explode": true,
               "schema": {
                 "type": "string"
               }
             }
           ],
           "responses": {
             "200": {
               "description": "OK",
               "content": {
                 "application/json": {
                   "schema": {
                     "type": "array",
                     "items": {
                       "$ref": "#/components/schemas/Encounter"
                     }
                   }
                 }
               }
             }
           }
         },
         "post": {
           "tags": [
             "PersonRegistrations"
           ],
           "description": "Create a new Encounter",
           "requestBody": {
             "content": {
               "application/json": {
                 "schema": {
                   "$ref": "#/components/schemas/Encounter"
                 }
               }
             },
             "required": true
           },
           "responses": {
             "201": {
               "description": "Created",
               "content": {
                 "application/json": {
                   "schema": {
                     "$ref": "#/components/schemas/Encounter"
                   }
                 }
               }
             }
           }
         }
       },
       "/PersonRegistrations/{id}": {
         "get": {
           "tags": [
             "PersonRegistrations"
           ],
           "description": "Get single Encounter by id",
           "parameters": [
             {
               "name": "id",
               "in": "path",
               "description": "missing description",
               "required": true,
               "style": "simple",
               "explode": false,
               "schema": {
                 "type": "string"
               }
             }
           ],
           "responses": {
             "200": {
               "description": "OK",
               "content": {
                 "application/json": {
                   "schema": {
                     "$ref": "#/components/schemas/Encounter"
                   }
                 }
               }
             }
           }
         },
         "patch": {
           "tags": [
             "PersonRegistrations"
           ],
           "description": "Update Encounter",
           "parameters": [
             {
               "name": "id",
               "in": "path",
               "description": "missing description",
               "required": true,
               "style": "simple",
               "explode": false,
               "schema": {
                 "type": "string"
               }
             }
           ],
           "requestBody": {
             "content": {
               "application/json": {
                 "schema": {
                   "$ref": "#/components/schemas/Encounter"
                 }
               }
             },
             "required": true
           },
           "responses": {
             "204": {
               "description": "No Content"
             }
           }
         }
       },
       "/Persons": {
         "get": {
           "tags": [
             "Persons"
           ],
           "description": "Get a list of Person",
           "parameters": [
             {
               "name": "Person",
               "in": "query",
               "description": "missing description",
               "required": false,
               "style": "form",
               "explode": true,
               "schema": {
                 "type": "string"
               }
             }
           ],
           "responses": {
             "200": {
               "description": "OK",
               "content": {
                 "application/json": {
                   "schema": {
                     "type": "array",
                     "items": {
                       "$ref": "#/components/schemas/Person"
                     }
                   }
                 }
               }
             }
           }
         }
       },
       "/Persons/{id}": {
         "get": {
           "tags": [
             "Persons"
           ],
           "description": "Get single Person by id",
           "parameters": [
             {
               "name": "id",
               "in": "path",
               "description": "missing description",
               "required": true,
               "style": "simple",
               "explode": false,
               "schema": {
                 "type": "string"
               }
             }
           ],
           "responses": {
             "200": {
               "description": "OK",
               "content": {
                 "application/json": {
                   "schema": {
                     "$ref": "#/components/schemas/Person"
                   }
                 }
               }
             }
           }
         }
       },
       "/Organisations": {
         "get": {
           "tags": [
             "Organisations"
           ],
           "description": "Get a list of Organisation",
           "parameters": [
             {
               "name": "Organisation",
               "in": "query",
               "description": "missing description",
               "required": false,
               "style": "form",
               "explode": true,
               "schema": {
                 "type": "string"
               }
             }
           ],
           "responses": {
             "200": {
               "description": "OK",
               "content": {
                 "application/json": {
                   "schema": {
                     "type": "array",
                     "items": {
                       "$ref": "#/components/schemas/Organisation"
                     }
                   }
                 }
               }
             }
           }
         }
       },
       "/OrganisationRegistrations": {
         "post": {
           "tags": [
             "OrganisationRegistrations"
           ],
           "description": "Create a new Encounter",
           "requestBody": {
             "content": {
               "application/json": {
                 "schema": {
                   "$ref": "#/components/schemas/Encounter"
                 }
               }
             },
             "required": true
           },
           "responses": {
             "201": {
               "description": "Created",
               "content": {
                 "application/json": {
                   "schema": {
                     "$ref": "#/components/schemas/Encounter"
                   }
                 }
               }
             }
           }
         }
       }
     },
     "components": {
       "schemas": {
         "Biographic": {
           "type": "object",
           "properties": {
             "nameTitle": {
               "type": "string",
               "description": "Text representation of the title"
             },
             "familyName": {
               "type": "string",
               "description": "missing description"
             },
             "givenName": {
               "type": "array",
               "items": {
                 "type": "string",
                 "description": "missing description"
               }
             },
             "nameSuffix": {
               "type": "string",
               "description": "Text representation of any suffixes"
             },
             "sexCode": {
               "type": "string",
               "description": "Example values may     ? - Unknown      F - Female          M - Male"
             },
             "birthDate": {
               "type": "string",
               "description": "missing description"
             },
             "birthCountryCode": {
               "type": "string",
               "description": "Can be Departmental or ISO        The empty string ‘’ is used if not provided"
             },
             "countryCodeType": {
               "type": "string",
               "description": "Example values are        DEPT     ISO_3166_ALPHA_3        The empty string ‘’ is used if not provided"
             },
             "birthPlaceStateOrProvince": {
               "type": "string",
               "description": "State or province of birth, e.g. NSW, York, Colorado, etc."
             },
             "birthPlaceName": {
               "type": "string",
               "description": "Place of birth that is not the country code or the state/province.  It is intended that would most likely be the city, e.g. Brisbane"
             },
             "Ethnicity": {
               "type": "string",
               "description": "A code for theparty  ethnicity, e.g. 1000 – Australasian (NFD)"
             },
             "Religion": {
               "type": "string",
               "description": "The religion, e.g. 0001A == Not Stated"
             },
             "RElationshipStatus": {
               "type": "string",
               "description": "The type of relationship, e.g. F == de-facto"
             }
           }
         },
         "BiographicIds": {
           "type": "object",
           "properties": {}
         },
         "BiographicIdentifier": {
           "required": [
             "id",
             "value"
           ],
           "type": "object",
           "properties": {
             "id": {
               "type": "string",
               "description": "Generated by the system as a monotonically increasing number greater than zero."
             },
             "value": {
               "type": "string",
               "description": "This is an internally unique biographic identifier generated by IDH"
             }
           }
         },
         "BiographicUsage": {
           "required": [
             "type"
           ],
           "type": "object",
           "properties": {
             "type": {
               "type": "string",
               "description": "How the name is used.  Example Departmental values include Principal Preferred and Alias Other"
             },
             "nameChangeReasonText": {
               "type": "string",
               "description": "Additional user entered text for a name change"
             },
             "nameChangeReasonCode": {
               "type": "string",
               "description": "The code value of a name change"
             }
           }
         },
         "BiographicUsageIdentifier": {
           "type": "object",
           "properties": {
             "biographicIdentifier": {
               "$ref": "#/components/schemas/BiographicIdentifier"
             }
           }
         },
         "BiometricIdentifier": {
           "required": [
             "code",
             "id",
             "value"
           ],
           "type": "object",
           "properties": {
             "code": {
               "type": "string",
               "description": "The identifier type,,e.g. BAMS - BAMS_ID"
             },
             "id": {
               "type": "string",
               "description": "Generated by the system as a monotonically increasing number greater than zero."
             },
             "value": {
               "type": "string",
               "description": "Passed by the source system"
             }
           }
         },
         "BiometricUsage": {
           "required": [
             "id"
           ],
           "type": "object",
           "properties": {
             "id": {
               "type": "string",
               "description": "missing description"
             },
             "biometricIdentifier": {
               "$ref": "#/components/schemas/BiometricIdentifier"
             },
             "encounter": {
               "$ref": "#/components/schemas/Encounter"
             }
           }
         },
         "BusinessDealingIdentifier": {
           "required": [
             "categoryCode",
             "code",
             "value"
           ],
           "type": "object",
           "properties": {
             "categoryCode": {
               "type": "string",
               "description": "The category of the business.  Example values are      CT    Citizenship Application      VA    Visa Application       VS    Visa"
             },
             "code": {
               "type": "string",
               "description": "This is the type of identifier stored.  For example, the value should be VGN for a visa grant number."
             },
             "value": {
               "type": "string",
               "description": "The value of the identifier.  For example, this is a visa grant number for a visa grant."
             }
           }
         },
         "BusinessDealingIdentifierIds": {
           "type": "object",
           "properties": {}
         },
         "BusinessRole": {
           "required": [
             "code"
           ],
           "type": "object",
           "properties": {
             "statusQualifierCode": {
               "type": "string",
               "description": "missing description"
             },
             "statusCode": {
               "type": "string",
               "description": "The status of the role"
             },
             "code": {
               "type": "string",
               "description": "The role played by the party in the business context, e.g. main applicant."
             }
           }
         },
         "ContactMethod": {
           "type": "object",
           "properties": {
             "email": {
               "type": "array",
               "items": {
                 "type": "string",
                 "description": "Stores email addresses both as unformatted text and in a formatted form.  The text has a unique index so that one, and only one, instance of any email address is stored."
               }
             },
             "telephone": {
               "type": "array",
               "items": {
                 "type": "string",
                 "description": "This entity stores telephone numbers both as unformatted text and in a formatted form.  The text has a unique index so that one, and only one, instance of any telephone number is stored."
               }
             },
             "Mobile": {
               "type": "array",
               "items": {
                 "type": "string",
                 "description": "This entity stores mobile numbers both as unformatted text and in a formatted form.  The text has a unique index so that one, and only one, instance of any mobile number is stored."
               }
             },
             "Fax": {
               "type": "array",
               "items": {
                 "type": "string",
                 "description": "Stores fax addresses both as unformatted text and in a formatted form.  The text has a unique index so that one, and only one, instance of any fax address is stored."
               }
             },
             "Telex": {
               "type": "array",
               "items": {
                 "type": "string",
                 "description": "Stores telex addresses both as unformatted text and in a formatted form.  The text has a unique index so that one, and only one, instance of any telex address is stored.  This is for historical data more than new data (although there are still telexes in use as of 2017, mainly in the maritime industry, and it is still a required element of the Global Maritime Distress and Safety System)."
               }
             },
             "Internet": {
               "type": "array",
               "items": {
                 "type": "string",
                 "description": "Stores internet addresses (e.g. web page URLs or IP addresses) both as unformatted text and in a formatted form.  The text has a unique index so that one, and only one, instance of any internet address is stored."
               }
             }
           }
         },
         "ContactMethodIds": {
           "type": "object",
           "properties": {}
         },
         "ContactMethodUsage": {
           "required": [
             "partyIdentifierEncounter",
             "sourceCode",
             "usageType"
           ],
           "type": "object",
           "properties": {
             "verified": {
               "type": "boolean",
               "description": "If this contact method has been verified for this party in this encounter"
             },
             "usageType": {
               "type": "string",
               "description": "The type of contact method (default, home, etc.)"
             },
             "sourceCode": {
               "type": "string",
               "description": "This is the contact method source, e.g. Application for, CIRIS, etc."
             },
             "preferredContactCode": {
               "type": "string",
               "description": "Example values are          1 - Migration Agent     4 - Non-Registered Migration Agent"
             },
             "preferredContact": {
               "type": "boolean",
               "description": "If this contact method is preferred"
             },
             "partyIdentifierEncounter": {
               "type": "string",
               "description": "The referential link to the parent PARTY_IDENTIFIER_ENCOUNTER."
             },
             "authorisedContact": {
               "type": "boolean",
               "description": "This is an authorised contact method"
             }
           }
         },
         "CountryResidence": {
           "required": [
             "countryCode",
             "countryCodeType"
           ],
           "type": "object",
           "properties": {
             "countryCode": {
               "type": "string",
               "description": "The country’s code, e.g. AUS"
             },
             "countryCodeType": {
               "type": "string",
               "description": "The code used, e.g.ISO_3166_ALPHA_3"
             },
             "currencyCode": {
               "type": "string",
               "description": "U – usual        P - Previous"
             },
             "residence": {
               "$ref": "#/components/schemas/Biographic"
             }
           }
         },
         "DeclaredCitizenship": {
           "required": [
             "countryCode",
             "countryCodeType"
           ],
           "type": "object",
           "properties": {
             "countryCode": {
               "type": "string",
               "description": "The country’s code, e.g. AUS"
             },
             "countryCodeType": {
               "type": "string",
               "description": "The code used, e.g.ISO_3166_ALPHA_3"
             },
             "citizenship": {
               "$ref": "#/components/schemas/Biographic"
             }
           }
         },
         "Document": {
           "required": [
             "code",
             "id",
             "number"
           ],
           "type": "object",
           "properties": {
             "id": {
               "type": "string",
               "description": "Generated by the system as a monotonically increasing number greater than zero."
             },
             "code": {
               "type": "string",
               "description": "The document’s type are per the Department’s standard document types, e.g. 01 – passport"
             },
             "issuingCountryCode": {
               "type": "string",
               "description": "missing description"
             },
             "issuingCountryCodeType": {
               "type": "string",
               "description": "Example values are     DEPT       ISO_3166_ALPHA_2"
             },
             "number": {
               "type": "string",
               "description": "The document’s number."
             },
             "expireDate": {
               "type": "string",
               "description": "missing description"
             },
             "issueDate": {
               "type": "string",
               "description": "missing description"
             },
             "issuerName": {
               "type": "string",
               "description": "missing description"
             },
             "issuingStateOrProvince": {
               "type": "string",
               "description": "missing description"
             },
             "photographIncluded": {
               "type": "boolean",
               "description": "missing description"
             },
             "statusCode": {
               "type": "string",
               "description": "The status of the document"
             },
             "usageType": {
               "type": "string",
               "description": "The document usage "
             },
             "version": {
               "type": "string",
               "description": "The version of the document."
             },
             "unknownDocumentCode": {
               "type": "string",
               "description": "If an unknown document code is sent then the document is created with a ‘991’ code type and the unknown document code is placed here."
             },
             "documentBiographic": {
               "$ref": "#/components/schemas/Biographic"
             }
           }
         },
         "DocumentIds": {
           "type": "object",
           "properties": {}
         },
         "DocumentCertificate": {
           "required": [
             "id",
             "number"
           ],
           "type": "object",
           "properties": {
             "id": {
               "type": "string",
               "description": "Generated by the system as a monotonically increasing number greater than zero."
             },
             "number": {
               "type": "string",
               "description": "The number on the certificate"
             },
             "printedDate": {
               "type": "string",
               "description": "Certificate printed date "
             },
             "certificate": {
               "$ref": "#/components/schemas/Document"
             }
           }
         },
         "DocumentEvent": {
           "required": [
             "id",
             "type"
           ],
           "type": "object",
           "properties": {
             "date": {
               "type": "string",
               "description": "Event date"
             },
             "id": {
               "type": "string",
               "description": "Generated by the system as a monotonically increasing number greater than zero."
             },
             "location": {
               "type": "string",
               "description": "Where the encounter occurred"
             },
             "note": {
               "type": "string",
               "description": "Any notes made by either the client of Departmental officer regarding the encounter"
             },
             "reason": {
               "type": "string",
               "description": "Why the encounter occurred"
             },
             "reasonCode": {
               "type": "string",
               "description": "Link to a list of document event reason codes"
             },
             "type": {
               "type": "string",
               "description": "The type of encounter, e.g. MARRIAGE"
             },
             "event": {
               "$ref": "#/components/schemas/Document"
             }
           }
         },
         "DocumentImage": {
           "required": [
             "id",
             "imageIdentifierCode",
             "imageIdentifierValue"
           ],
           "type": "object",
           "properties": {
             "acquisitionLocation": {
               "type": "string",
               "description": "Where the image was acquired"
             },
             "acquisitionMethod": {
               "type": "string",
               "description": "How the image was acquired, e.g. NON_ELECTRONICALLY_SUPPLIED"
             },
             "acquisitionTimestamp": {
               "type": "string",
               "description": "When the image was acquired"
             },
             "id": {
               "type": "string",
               "description": "Generated by the system as a monotonically increasing number greater than zero."
             },
             "imageCode": {
               "type": "string",
               "description": "Example values are     FC  Facial      FP  Fingerprint    IS  Iris Scan"
             },
             "imageIdentifierCode": {
               "type": "string",
               "description": "The image identifier code, e.g.     BAMS     IIID     TID"
             },
             "imageIdentifierValue": {
               "type": "string",
               "description": "The identifier of the image in the source system"
             },
             "inError": {
               "type": "boolean",
               "description": "If the image was acquired in error"
             },
             "photographIncluded": {
               "type": "boolean",
               "description": "If the image includes a photograph"
             },
             "registrationMethodCode": {
               "type": "string",
               "description": "How the image was registered, e.g.    ELECTRONICALLY_SUPPLIED    NON_ELECTRONICALLY_SUPPLIED"
             },
             "thirdPartyReasonCode": {
               "type": "string",
               "description": "Values are     IMMIGRATION_RELATED     NON_IMMIGRATION_RELATED"
             },
             "documentImage": {
               "$ref": "#/components/schemas/Document"
             }
           }
         },
         "DocumentUsage": {
           "type": "object",
           "properties": {
             "translationOrganisationCode": {
               "type": "string",
               "description": "Example values      UNKNOWN - Unknown     DIMA_OFCR - DIMA Officer     NAATI - NAATI"
             },
             "translation": {
               "type": "boolean",
               "description": "missing description"
             },
             "scanReferenceText": {
               "type": "string",
               "description": "missing description"
             },
             "certificationType": {
               "type": "string",
               "description": "e.g. “ORIGINAL”, “COPY”, etc."
             },
             "additionalDocumentTextType": {
               "type": "string",
               "description": "missing description"
             }
           }
         },
         "DocumentVerification": {
           "required": [
             "id",
             "verificationIdentifierCode",
             "verificationIdentifierValue"
           ],
           "type": "object",
           "properties": {
             "id": {
               "type": "string",
               "description": "Generated by the system as a monotonically increasing number greater than zero."
             },
             "referralStatusCode": {
               "type": "string",
               "description": "The referral status code, e.g. CREATED"
             },
             "verificationActivityCode": {
               "type": "string",
               "description": "The verification activity, e.g. SIGHT_DOCUMENT"
             },
             "verificationIdentifierCode": {
               "type": "string",
               "description": "The identifier reference from the source system of the verification activity"
             },
             "verificationIdentifierValue": {
               "type": "string",
               "description": "The identifier code type, e.g. IDVI"
             },
             "verification": {
               "$ref": "#/components/schemas/Document"
             }
           }
         },
         "Encounter": {
           "required": [
             "identifier",
             "systemCode",
             "systemTimestamp",
             "timestamp",
             "type"
           ],
           "type": "object",
           "properties": {
             "identifier": {
               "type": "string",
               "description": "The unique identifier of this encounter"
             },
             "location": {
               "type": "string",
               "description": "Where the encounter occurred."
             },
             "resolutionStatusCode": {
               "type": "string",
               "description": "Code to identify the current resolution status"
             },
             "systemCode": {
               "type": "string",
               "description": "The source system of the encounter"
             },
             "systemTimestamp": {
               "type": "string",
               "description": "The TIMESTAMP of the source system"
             },
             "timestamp": {
               "type": "string",
               "description": "The timestamp of the encounter."
             },
             "type": {
               "type": "string",
               "description": "The type of identification encounter.  Current values are      REGISTER_IDENTITY      MERGE_IDENTITY      UPDATE_IDENTITY"
             },
             "userId": {
               "type": "string",
               "description": "The user identifier"
             },
             "organisaitonDetails": {
               "$ref": "#/components/schemas/Organisation"
             },
             "contactDetails": {
               "type": "array",
               "items": {
                 "$ref": "#/components/schemas/ContactMethod"
               }
             },
             "businessDealingID": {
               "$ref": "#/components/schemas/BusinessDealingIdentifier"
             },
             "systemPartyID": {
               "$ref": "#/components/schemas/ManagedPartyIdentifier"
             },
             "externalPartyID": {
               "$ref": "#/components/schemas/ExternalPartyIdentifier"
             },
             "organisationID": {
               "$ref": "#/components/schemas/ExternalIdentifier"
             },
             "declaredBiograpics": {
               "$ref": "#/components/schemas/Biographic"
             }
           }
         },
         "Ethnicity": {
           "required": [
             "code"
           ],
           "type": "object",
           "properties": {
             "code": {
               "type": "string",
               "description": "A code for the ethnicity, e.g. 1000 – Australasian (NFD)"
             },
             "encounter": {
               "$ref": "#/components/schemas/Biographic"
             }
           }
         },
         "ExternalIdentifier": {
           "required": [
             "code",
             "value"
           ],
           "type": "object",
           "properties": {
             "code": {
               "type": "string",
               "description": "The identifier code, e.g. ACN, ABN, etc."
             },
             "value": {
               "type": "string",
               "description": "The external value of the organisation, for example its ACN number."
             }
           }
         },
         "ExternalPartyIdentifier": {
           "required": [
             "code",
             "id",
             "value"
           ],
           "type": "object",
           "properties": {
             "code": {
               "type": "string",
               "description": "The external identifier’s code, e.g. PID"
             },
             "id": {
               "type": "string",
               "description": "Generated by the system as a monotonically increasing number greater than zero."
             },
             "value": {
               "type": "string",
               "description": "The external identifier value"
             }
           }
         },
         "Language": {
           "required": [
             "code"
           ],
           "type": "object",
           "properties": {
             "code": {
               "type": "string",
               "description": "A code for the language, e.g. 1201A (English)"
             },
             "preferredLanguage": {
               "type": "boolean",
               "description": "If this is the preferred language of the party"
             },
             "encounter": {
               "$ref": "#/components/schemas/Encounter"
             }
           }
         },
         "Location": {
           "type": "object",
           "properties": {
             "addressLine1": {
               "type": "string",
               "description": "missing description"
             },
             "addressLine2": {
               "type": "string",
               "description": "missing description"
             },
             "addressLine3": {
               "type": "string",
               "description": "missing description"
             },
             "addressLine4": {
               "type": "string",
               "description": "missing description"
             },
             "localityName": {
               "type": "string",
               "description": "missing description"
             },
             "postCode": {
               "type": "string",
               "description": "missing description"
             },
             "stateName": {
               "type": "string",
               "description": "missing description"
             },
             "countryCode": {
               "type": "string",
               "description": "missing description"
             },
             "countryCodeType": {
               "type": "string",
               "description": "Example values are       DEPT      ISO_3166_ALPHA_2"
             },
             "Address": {
               "$ref": "#/components/schemas/ContactMethod"
             }
           }
         },
         "ManagedPartyIdentifier": {
           "required": [
             "code",
             "value"
           ],
           "type": "object",
           "properties": {
             "code": {
               "type": "string",
               "description": "Managed party identifier code, e.g.     BAMS     PEI"
             },
             "value": {
               "type": "string",
               "description": "The value of the party identifier.  For example, this is the value of a CID from TRIPS"
             }
           }
         },
         "Organisation": {
           "required": [
             "name",
             "nameType"
           ],
           "type": "object",
           "properties": {
             "name": {
               "type": "string",
               "description": "The name of the organisation"
             },
             "nameType": {
               "type": "string",
               "description": "Example values are       COMPANY_NAME - Company Name        REGISTERED_NAME - Registered Name       TRADING_NAME - Trading Name"
             },
             "structureType": {
               "type": "string",
               "description": "Example values are       Partnership - Partnership     Sole Trader - Sole Trader       Corporation – Corporation          Government - Government"
             },
             "industryCode": {
               "type": "string",
               "description": "An industry code associated with the organisation.  Example values are      A - Agriculture, Forestry and Fishing      B - Mining        C - Manufacturing      D - Electricity, Gas, Water and Waste Services"
             },
             "mainActivity": {
               "type": "string",
               "description": "An optional description of the main activity of the organisation."
             },
             "organisationID": {
               "type": "array",
               "items": {
                 "$ref": "#/components/schemas/ExternalIdentifier"
               }
             }
           },
           "allOf": [
             {
               "$ref": "#/components/schemas/Party"
             },
             {
               "type": "object"
             }
           ]
         },
         "Party": {
           "required": [
             "code",
             "id"
           ],
           "type": "object",
           "properties": {
             "code": {
               "type": "string",
               "description": "Identifies if the party is an organisation, person (or agent).  Default ‘U’"
             },
             "BusinessRole": {
               "type": "array",
               "items": {
                 "allOf": [
                   {
                     "$ref": "#/components/schemas/BusinessDealingIdentifierIds"
                   },
                   {
                     "$ref": "#/components/schemas/BusinessRole"
                   },
                   {
                     "type": "object"
                   }
                 ]
               }
             },
             "PartyRelationship": {
               "type": "array",
               "items": {
                 "allOf": [
                   {
                     "$ref": "#/components/schemas/PartyIds"
                   },
                   {
                     "$ref": "#/components/schemas/PartyRelationship"
                   },
                   {
                     "type": "object"
                   }
                 ]
               }
             },
             "ContactMethodUsage": {
               "type": "array",
               "items": {
                 "allOf": [
                   {
                     "$ref": "#/components/schemas/ContactMethodIds"
                   },
                   {
                     "$ref": "#/components/schemas/ContactMethodUsage"
                   },
                   {
                     "type": "object"
                   }
                 ]
               }
             },
             "systemPartyID": {
               "type": "array",
               "items": {
                 "$ref": "#/components/schemas/ManagedPartyIdentifier"
               }
             },
             "BusinessDealingID": {
               "type": "array",
               "items": {
                 "$ref": "#/components/schemas/BusinessDealingIdentifier"
               }
             }
           },
           "allOf": [
             {
               "$ref": "#/components/schemas/PartyIds"
             },
             {
               "type": "object"
             }
           ]
         },
         "PartyIds": {
           "required": [
             "id"
           ],
           "type": "object",
           "properties": {
             "id": {
               "type": "string",
               "description": "Generated by the system as a monotonically increasing number greater than zero."
             }
           }
         },
         "PartyRelationship": {
           "required": [
             "code"
           ],
           "type": "object",
           "properties": {
             "code": {
               "type": "string",
               "description": "The relationship type"
             }
           }
         },
         "Person": {
           "type": "object",
           "properties": {
             "BiographicUsage": {
               "type": "array",
               "items": {
                 "allOf": [
                   {
                     "$ref": "#/components/schemas/Biographic"
                   },
                   {
                     "$ref": "#/components/schemas/BiographicUsage"
                   },
                   {
                     "type": "object"
                   }
                 ]
               }
             },
             "DocumentUsage": {
               "type": "array",
               "items": {
                 "allOf": [
                   {
                     "$ref": "#/components/schemas/Document"
                   },
                   {
                     "$ref": "#/components/schemas/DocumentUsage"
                   },
                   {
                     "type": "object"
                   }
                 ]
               }
             },
             "biographicUsage": {
               "type": "array",
               "items": {
                 "$ref": "#/components/schemas/Biographic"
               }
             }
           },
           "allOf": [
             {
               "$ref": "#/components/schemas/Party"
             },
             {
               "type": "object"
             }
           ]
         },
         "RelationshipStatus": {
           "required": [
             "code"
           ],
           "type": "object",
           "properties": {
             "code": {
               "type": "string",
               "description": "The type of relationship, e.g. F == de-facto"
             },
             "encounter": {
               "$ref": "#/components/schemas/Biographic"
             }
           }
         },
         "Religion": {
           "required": [
             "code"
           ],
           "type": "object",
           "properties": {
             "code": {
               "type": "string",
               "description": "The religion, e.g. 0001A == Not Stated"
             },
             "encounter": {
               "$ref": "#/components/schemas/Biographic"
             }
           }
         }
       }
     }
   }